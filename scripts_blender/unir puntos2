import bpy
import json
import mathutils

# ‚úÖ Ruta al archivo JSON (actualiz√° con tu propia ruta si cambia)
json_path = "C:/Users/Enzo/Desktop/IA_Final/2/pose_data_2D3.json"
scale = 10  # Escala de visualizaci√≥n

# üß± Conexiones del stickman, incluyendo cuello (100) y cadera central (101)
connections = [
    (0, 100),         # Cabeza a cuello
    (100, 11), (100, 12),  # Cuello a hombros
    (100, 101),            # Cuello a cadera central
    (101, 23), (101, 24),  # Cadera central a caderas

    (11, 13), (13, 15), (15, 21),  # Brazo izquierdo completo
    (12, 14), (14, 16), (16, 22),  # Brazo derecho completo

    (23, 25), (25, 27), (27, 31),  # Pierna izquierda
    (24, 26), (26, 28), (28, 32)   # Pierna derecha
]

# üìÇ Leer archivo JSON
with open(json_path) as f:
    data = json.load(f)

# üìå Funci√≥n para obtener posici√≥n en 3D
def get_pos(idx):
    key = f"landmark_{idx}"
    if key not in data:
        raise ValueError(f"‚ùó PUNTO FALTANTE: {key}")
    x = (data[key]["x"] - 0.5) * scale
    z = (0.5 - data[key]["y"]) * scale
    return mathutils.Vector((x, 0, z))

# üßπ Limpiar objetos anteriores del tipo "Segment_"
for obj in bpy.data.objects:
    if obj.name.startswith("Segment_"):
        bpy.data.objects.remove(obj, do_unlink=True)

# ü™¢ Crear segmentos como l√≠neas entre puntos
for i, (a, b) in enumerate(connections):
    try:
        p1 = get_pos(a)
        p2 = get_pos(b)
    except ValueError as e:
        print(e)
        continue

    mesh = bpy.data.meshes.new(f"SegmentMesh_{i}")
    obj = bpy.data.objects.new(f"Segment_{i}", mesh)
    bpy.context.collection.objects.link(obj)
    mesh.from_pydata([p1, p2], [(0, 1)], [])
    mesh.update()

    obj.show_in_front = True
    obj.display_type = 'WIRE'

print("‚úÖ Stickman 3D generado con cuello y cadera incluidos")
