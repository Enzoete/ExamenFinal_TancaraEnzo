import bpy
import json
import mathutils

# 📂 Ruta al archivo JSON
json_path = "C:/Users/Enzo/Desktop/IA_Final/poses_json/pose_data_2D4.json"
scale = 10
arm_name = "StickmanRig"

# 📖 Leer JSON
with open(json_path) as f:
    data = json.load(f)

# 🧠 Calcular landmark virtual 102 (punto medio entre cuello 100 y cadera 101)
def calc_midpoint(id1, id2, new_id):
    p1 = data[f"landmark_{id1}"]
    p2 = data[f"landmark_{id2}"]
    mx = (p1["x"] + p2["x"]) / 2
    my = (p1["y"] + p2["y"]) / 2
    data[f"landmark_{new_id}"] = {"x": mx, "y": my}

calc_midpoint(100, 101, 102)

# 🧱 Definición de huesos
bone_connections = [
    ("head", 0, 100),
    ("neck", 100, 102),
    ("spine_lower", 102, 101),

    ("shoulder_L", 100, 11), ("upper_arm_L", 11, 13), ("forearm_L", 13, 15), ("hand_L", 15, 21),
    ("shoulder_R", 100, 12), ("upper_arm_R", 12, 14), ("forearm_R", 14, 16), ("hand_R", 16, 22),

    ("hip_L", 101, 23), ("thigh_L", 23, 25), ("shin_L", 25, 27), ("foot_L", 27, 31),
    ("hip_R", 101, 24), ("thigh_R", 24, 26), ("shin_R", 26, 28), ("foot_R", 28, 32)
]

# 🔍 Convertir puntos a coordenadas 3D
def get_point(idx):
    key = f"landmark_{idx}"
    if key not in data:
        raise ValueError(f"⚠️ Faltante: {key}")
    x = (data[key]["x"] - 0.5) * scale
    z = (0.5 - data[key]["y"]) * scale
    return mathutils.Vector((x, 0, z))

# 🧹 Limpiar armature previa
for obj in bpy.data.objects:
    if obj.type == 'ARMATURE' and obj.name == arm_name:
        bpy.data.objects.remove(obj, do_unlink=True)

# 🦴 Crear nuevo rig
bpy.ops.object.add(type='ARMATURE', enter_editmode=True)

arm = bpy.context.object
arm.name = arm_name
arm.show_in_front = True
edit_bones = arm.data.edit_bones
created_bones = {}

# 🔧 Crear huesos
for name, start_idx, end_idx in bone_connections:
    bone = edit_bones.new(name)
    bone.head = get_point(start_idx)
    bone.tail = get_point(end_idx)
    bone.roll = 0
    created_bones[name] = bone

# 🧷 Definir jerarquía
created_bones["neck"].parent = created_bones["head"]
created_bones["spine_lower"].parent = created_bones["neck"]

# Brazo izquierdo
created_bones["shoulder_L"].parent = created_bones["neck"]
created_bones["upper_arm_L"].parent = created_bones["shoulder_L"]
created_bones["forearm_L"].parent = created_bones["upper_arm_L"]
created_bones["hand_L"].parent = created_bones["forearm_L"]

# Brazo derecho
created_bones["shoulder_R"].parent = created_bones["neck"]
created_bones["upper_arm_R"].parent = created_bones["shoulder_R"]
created_bones["forearm_R"].parent = created_bones["upper_arm_R"]
created_bones["hand_R"].parent = created_bones["forearm_R"]

# Pierna izquierda
created_bones["hip_L"].parent = created_bones["spine_lower"]
created_bones["thigh_L"].parent = created_bones["hip_L"]
created_bones["shin_L"].parent = created_bones["thigh_L"]
created_bones["foot_L"].parent = created_bones["shin_L"]

# Pierna derecha
created_bones["hip_R"].parent = created_bones["spine_lower"]
created_bones["thigh_R"].parent = created_bones["hip_R"]
created_bones["shin_R"].parent = created_bones["thigh_R"]
created_bones["foot_R"].parent = created_bones["shin_R"]

bpy.ops.object.mode_set(mode='OBJECT')
print("✅ Rig creado con torso dividido: cuello → centro → cadera ✅")